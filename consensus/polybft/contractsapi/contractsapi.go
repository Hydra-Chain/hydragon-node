// Code generated by scapi/gen. DO NOT EDIT.
package contractsapi

import (
	"math/big"

	"github.com/0xPolygon/polygon-edge/types"
	"github.com/umbracle/ethgo"
	"github.com/umbracle/ethgo/abi"
)

type ValidatorInit struct {
	Addr      types.Address `abi:"addr"`
	Pubkey    [4]*big.Int   `abi:"pubkey"`
	Signature [2]*big.Int   `abi:"signature"`
}

var ValidatorInitABIType = abi.MustNewType("tuple(address addr,uint256[4] pubkey,uint256[2] signature)")

func (v *ValidatorInit) EncodeAbi() ([]byte, error) {
	return ValidatorInitABIType.Encode(v)
}

func (v *ValidatorInit) DecodeAbi(buf []byte) error {
	return decodeStruct(ValidatorInitABIType, buf, &v)
}

type InitializeHydraChainFn struct {
	NewValidators       []*ValidatorInit `abi:"newValidators"`
	Governance          types.Address    `abi:"governance"`
	HydraStakingAddr    types.Address    `abi:"hydraStakingAddr"`
	HydraDelegationAddr types.Address    `abi:"hydraDelegationAddr"`
	NewBls              types.Address    `abi:"newBls"`
}

func (i *InitializeHydraChainFn) Sig() []byte {
	return HydraChain.Abi.Methods["initialize"].ID()
}

func (i *InitializeHydraChainFn) EncodeAbi() ([]byte, error) {
	return HydraChain.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeHydraChainFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraChain.Abi.Methods["initialize"], buf, i)
}

type Epoch struct {
	StartBlock *big.Int   `abi:"startBlock"`
	EndBlock   *big.Int   `abi:"endBlock"`
	EpochRoot  types.Hash `abi:"epochRoot"`
}

var EpochABIType = abi.MustNewType("tuple(uint256 startBlock,uint256 endBlock,bytes32 epochRoot)")

func (e *Epoch) EncodeAbi() ([]byte, error) {
	return EpochABIType.Encode(e)
}

func (e *Epoch) DecodeAbi(buf []byte) error {
	return decodeStruct(EpochABIType, buf, &e)
}

type Uptime struct {
	Validator    types.Address `abi:"validator"`
	SignedBlocks *big.Int      `abi:"signedBlocks"`
}

var UptimeABIType = abi.MustNewType("tuple(address validator,uint256 signedBlocks)")

func (u *Uptime) EncodeAbi() ([]byte, error) {
	return UptimeABIType.Encode(u)
}

func (u *Uptime) DecodeAbi(buf []byte) error {
	return decodeStruct(UptimeABIType, buf, &u)
}

type CommitEpochHydraChainFn struct {
	ID        *big.Int  `abi:"id"`
	Epoch     *Epoch    `abi:"epoch"`
	EpochSize *big.Int  `abi:"epochSize"`
	Uptime    []*Uptime `abi:"uptime"`
}

func (c *CommitEpochHydraChainFn) Sig() []byte {
	return HydraChain.Abi.Methods["commitEpoch"].ID()
}

func (c *CommitEpochHydraChainFn) EncodeAbi() ([]byte, error) {
	return HydraChain.Abi.Methods["commitEpoch"].Encode(c)
}

func (c *CommitEpochHydraChainFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraChain.Abi.Methods["commitEpoch"], buf, c)
}

type AddToWhitelistHydraChainFn struct {
	WhitelistAddreses []ethgo.Address `abi:"whitelistAddreses"`
}

func (a *AddToWhitelistHydraChainFn) Sig() []byte {
	return HydraChain.Abi.Methods["addToWhitelist"].ID()
}

func (a *AddToWhitelistHydraChainFn) EncodeAbi() ([]byte, error) {
	return HydraChain.Abi.Methods["addToWhitelist"].Encode(a)
}

func (a *AddToWhitelistHydraChainFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraChain.Abi.Methods["addToWhitelist"], buf, a)
}

type RegisterHydraChainFn struct {
	Signature [2]*big.Int `abi:"signature"`
	Pubkey    [4]*big.Int `abi:"pubkey"`
}

func (r *RegisterHydraChainFn) Sig() []byte {
	return HydraChain.Abi.Methods["register"].ID()
}

func (r *RegisterHydraChainFn) EncodeAbi() ([]byte, error) {
	return HydraChain.Abi.Methods["register"].Encode(r)
}

func (r *RegisterHydraChainFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraChain.Abi.Methods["register"], buf, r)
}

type NewValidatorEvent struct {
	Validator types.Address `abi:"validator"`
	BlsKey    [4]*big.Int   `abi:"blsKey"`
}

func (*NewValidatorEvent) Sig() ethgo.Hash {
	return HydraChain.Abi.Events["NewValidator"].ID()
}

func (n *NewValidatorEvent) Encode() ([]byte, error) {
	return HydraChain.Abi.Events["NewValidator"].Inputs.Encode(n)
}

func (n *NewValidatorEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraChain.Abi.Events["NewValidator"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraChain.Abi.Events["NewValidator"], log, n)
}

func (n *NewValidatorEvent) Decode(input []byte) error {
	return HydraChain.Abi.Events["NewValidator"].Inputs.DecodeStruct(input, &n)
}

type AddedToWhitelistEvent struct {
	Validator types.Address `abi:"validator"`
}

func (*AddedToWhitelistEvent) Sig() ethgo.Hash {
	return HydraChain.Abi.Events["AddedToWhitelist"].ID()
}

func (a *AddedToWhitelistEvent) Encode() ([]byte, error) {
	return HydraChain.Abi.Events["AddedToWhitelist"].Inputs.Encode(a)
}

func (a *AddedToWhitelistEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraChain.Abi.Events["AddedToWhitelist"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraChain.Abi.Events["AddedToWhitelist"], log, a)
}

func (a *AddedToWhitelistEvent) Decode(input []byte) error {
	return HydraChain.Abi.Events["AddedToWhitelist"].Inputs.DecodeStruct(input, &a)
}

type RemovedFromWhitelistEvent struct {
	Validator types.Address `abi:"validator"`
}

func (*RemovedFromWhitelistEvent) Sig() ethgo.Hash {
	return HydraChain.Abi.Events["RemovedFromWhitelist"].ID()
}

func (r *RemovedFromWhitelistEvent) Encode() ([]byte, error) {
	return HydraChain.Abi.Events["RemovedFromWhitelist"].Inputs.Encode(r)
}

func (r *RemovedFromWhitelistEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraChain.Abi.Events["RemovedFromWhitelist"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraChain.Abi.Events["RemovedFromWhitelist"], log, r)
}

func (r *RemovedFromWhitelistEvent) Decode(input []byte) error {
	return HydraChain.Abi.Events["RemovedFromWhitelist"].Inputs.DecodeStruct(input, &r)
}

type ValidatorBannedEvent struct {
	Validator types.Address `abi:"validator"`
}

func (*ValidatorBannedEvent) Sig() ethgo.Hash {
	return HydraChain.Abi.Events["ValidatorBanned"].ID()
}

func (v *ValidatorBannedEvent) Encode() ([]byte, error) {
	return HydraChain.Abi.Events["ValidatorBanned"].Inputs.Encode(v)
}

func (v *ValidatorBannedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraChain.Abi.Events["ValidatorBanned"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraChain.Abi.Events["ValidatorBanned"], log, v)
}

func (v *ValidatorBannedEvent) Decode(input []byte) error {
	return HydraChain.Abi.Events["ValidatorBanned"].Inputs.DecodeStruct(input, &v)
}

type StakerInit struct {
	Addr  types.Address `abi:"addr"`
	Stake *big.Int      `abi:"stake"`
}

var StakerInitABIType = abi.MustNewType("tuple(address addr,uint256 stake)")

func (s *StakerInit) EncodeAbi() ([]byte, error) {
	return StakerInitABIType.Encode(s)
}

func (s *StakerInit) DecodeAbi(buf []byte) error {
	return decodeStruct(StakerInitABIType, buf, &s)
}

type InitializeHydraStakingFn struct {
	InitialStakers      []*StakerInit `abi:"initialStakers"`
	Governance          types.Address `abi:"governance"`
	NewMinStake         *big.Int      `abi:"newMinStake"`
	NewLiquidToken      types.Address `abi:"newLiquidToken"`
	HydraChainAddr      types.Address `abi:"hydraChainAddr"`
	AprCalculatorAddr   types.Address `abi:"aprCalculatorAddr"`
	HydraDelegationAddr types.Address `abi:"hydraDelegationAddr"`
	RewardWalletAddr    types.Address `abi:"rewardWalletAddr"`
}

func (i *InitializeHydraStakingFn) Sig() []byte {
	return HydraStaking.Abi.Methods["initialize"].ID()
}

func (i *InitializeHydraStakingFn) EncodeAbi() ([]byte, error) {
	return HydraStaking.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeHydraStakingFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraStaking.Abi.Methods["initialize"], buf, i)
}

type StakeHydraStakingFn struct {
}

func (s *StakeHydraStakingFn) Sig() []byte {
	return HydraStaking.Abi.Methods["stake"].ID()
}

func (s *StakeHydraStakingFn) EncodeAbi() ([]byte, error) {
	return HydraStaking.Abi.Methods["stake"].Encode(s)
}

func (s *StakeHydraStakingFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraStaking.Abi.Methods["stake"], buf, s)
}

type UnstakeHydraStakingFn struct {
	Amount *big.Int `abi:"amount"`
}

func (u *UnstakeHydraStakingFn) Sig() []byte {
	return HydraStaking.Abi.Methods["unstake"].ID()
}

func (u *UnstakeHydraStakingFn) EncodeAbi() ([]byte, error) {
	return HydraStaking.Abi.Methods["unstake"].Encode(u)
}

func (u *UnstakeHydraStakingFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraStaking.Abi.Methods["unstake"], buf, u)
}

type DistributeRewardsForHydraStakingFn struct {
	EpochID   *big.Int  `abi:"epochId"`
	Uptime    []*Uptime `abi:"uptime"`
	EpochSize *big.Int  `abi:"epochSize"`
}

func (d *DistributeRewardsForHydraStakingFn) Sig() []byte {
	return HydraStaking.Abi.Methods["distributeRewardsFor"].ID()
}

func (d *DistributeRewardsForHydraStakingFn) EncodeAbi() ([]byte, error) {
	return HydraStaking.Abi.Methods["distributeRewardsFor"].Encode(d)
}

func (d *DistributeRewardsForHydraStakingFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraStaking.Abi.Methods["distributeRewardsFor"], buf, d)
}

type ClaimStakingRewardsHydraStakingFn struct {
}

func (c *ClaimStakingRewardsHydraStakingFn) Sig() []byte {
	return HydraStaking.Abi.MethodsBySignature["claimStakingRewards()"].ID()
}

func (c *ClaimStakingRewardsHydraStakingFn) EncodeAbi() ([]byte, error) {
	return HydraStaking.Abi.MethodsBySignature["claimStakingRewards()"].Encode(c)
}

func (c *ClaimStakingRewardsHydraStakingFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraStaking.Abi.MethodsBySignature["claimStakingRewards()"], buf, c)
}

type WithdrawHydraStakingFn struct {
	To types.Address `abi:"to"`
}

func (w *WithdrawHydraStakingFn) Sig() []byte {
	return HydraStaking.Abi.Methods["withdraw"].ID()
}

func (w *WithdrawHydraStakingFn) EncodeAbi() ([]byte, error) {
	return HydraStaking.Abi.Methods["withdraw"].Encode(w)
}

func (w *WithdrawHydraStakingFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraStaking.Abi.Methods["withdraw"], buf, w)
}

type StakedEvent struct {
	Account types.Address `abi:"account"`
	Amount  *big.Int      `abi:"amount"`
}

func (*StakedEvent) Sig() ethgo.Hash {
	return HydraStaking.Abi.Events["Staked"].ID()
}

func (s *StakedEvent) Encode() ([]byte, error) {
	return HydraStaking.Abi.Events["Staked"].Inputs.Encode(s)
}

func (s *StakedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraStaking.Abi.Events["Staked"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraStaking.Abi.Events["Staked"], log, s)
}

func (s *StakedEvent) Decode(input []byte) error {
	return HydraStaking.Abi.Events["Staked"].Inputs.DecodeStruct(input, &s)
}

type UnstakedEvent struct {
	Account types.Address `abi:"account"`
	Amount  *big.Int      `abi:"amount"`
}

func (*UnstakedEvent) Sig() ethgo.Hash {
	return HydraStaking.Abi.Events["Unstaked"].ID()
}

func (u *UnstakedEvent) Encode() ([]byte, error) {
	return HydraStaking.Abi.Events["Unstaked"].Inputs.Encode(u)
}

func (u *UnstakedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraStaking.Abi.Events["Unstaked"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraStaking.Abi.Events["Unstaked"], log, u)
}

func (u *UnstakedEvent) Decode(input []byte) error {
	return HydraStaking.Abi.Events["Unstaked"].Inputs.DecodeStruct(input, &u)
}

type BalanceChangedEvent struct {
	Account    types.Address `abi:"account"`
	NewBalance *big.Int      `abi:"newBalance"`
}

func (*BalanceChangedEvent) Sig() ethgo.Hash {
	return HydraStaking.Abi.Events["BalanceChanged"].ID()
}

func (b *BalanceChangedEvent) Encode() ([]byte, error) {
	return HydraStaking.Abi.Events["BalanceChanged"].Inputs.Encode(b)
}

func (b *BalanceChangedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraStaking.Abi.Events["BalanceChanged"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraStaking.Abi.Events["BalanceChanged"], log, b)
}

func (b *BalanceChangedEvent) Decode(input []byte) error {
	return HydraStaking.Abi.Events["BalanceChanged"].Inputs.DecodeStruct(input, &b)
}

type StakingRewardDistributedEvent struct {
	Account types.Address `abi:"account"`
	Amount  *big.Int      `abi:"amount"`
}

func (*StakingRewardDistributedEvent) Sig() ethgo.Hash {
	return HydraStaking.Abi.Events["StakingRewardDistributed"].ID()
}

func (s *StakingRewardDistributedEvent) Encode() ([]byte, error) {
	return HydraStaking.Abi.Events["StakingRewardDistributed"].Inputs.Encode(s)
}

func (s *StakingRewardDistributedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraStaking.Abi.Events["StakingRewardDistributed"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraStaking.Abi.Events["StakingRewardDistributed"], log, s)
}

func (s *StakingRewardDistributedEvent) Decode(input []byte) error {
	return HydraStaking.Abi.Events["StakingRewardDistributed"].Inputs.DecodeStruct(input, &s)
}

type StakingRewardsClaimedEvent struct {
	Account types.Address `abi:"account"`
	Amount  *big.Int      `abi:"amount"`
}

func (*StakingRewardsClaimedEvent) Sig() ethgo.Hash {
	return HydraStaking.Abi.Events["StakingRewardsClaimed"].ID()
}

func (s *StakingRewardsClaimedEvent) Encode() ([]byte, error) {
	return HydraStaking.Abi.Events["StakingRewardsClaimed"].Inputs.Encode(s)
}

func (s *StakingRewardsClaimedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraStaking.Abi.Events["StakingRewardsClaimed"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraStaking.Abi.Events["StakingRewardsClaimed"], log, s)
}

func (s *StakingRewardsClaimedEvent) Decode(input []byte) error {
	return HydraStaking.Abi.Events["StakingRewardsClaimed"].Inputs.DecodeStruct(input, &s)
}

type WithdrawalFinishedEvent struct {
	Account types.Address `abi:"account"`
	To      types.Address `abi:"to"`
	Amount  *big.Int      `abi:"amount"`
}

func (*WithdrawalFinishedEvent) Sig() ethgo.Hash {
	return HydraStaking.Abi.Events["WithdrawalFinished"].ID()
}

func (w *WithdrawalFinishedEvent) Encode() ([]byte, error) {
	return HydraStaking.Abi.Events["WithdrawalFinished"].Inputs.Encode(w)
}

func (w *WithdrawalFinishedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraStaking.Abi.Events["WithdrawalFinished"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraStaking.Abi.Events["WithdrawalFinished"], log, w)
}

func (w *WithdrawalFinishedEvent) Decode(input []byte) error {
	return HydraStaking.Abi.Events["WithdrawalFinished"].Inputs.DecodeStruct(input, &w)
}

type InitializeHydraDelegationFn struct {
	InitialStakers            []*StakerInit `abi:"initialStakers"`
	Governance                types.Address `abi:"governance"`
	InitialCommission         *big.Int      `abi:"initialCommission"`
	LiquidToken               types.Address `abi:"liquidToken"`
	AprCalculatorAddr         types.Address `abi:"aprCalculatorAddr"`
	HydraStakingAddr          types.Address `abi:"hydraStakingAddr"`
	HydraChainAddr            types.Address `abi:"hydraChainAddr"`
	VestingManagerFactoryAddr types.Address `abi:"vestingManagerFactoryAddr"`
	RewardWalletAddr          types.Address `abi:"rewardWalletAddr"`
}

func (i *InitializeHydraDelegationFn) Sig() []byte {
	return HydraDelegation.Abi.Methods["initialize"].ID()
}

func (i *InitializeHydraDelegationFn) EncodeAbi() ([]byte, error) {
	return HydraDelegation.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeHydraDelegationFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraDelegation.Abi.Methods["initialize"], buf, i)
}

type DelegateHydraDelegationFn struct {
	Staker types.Address `abi:"staker"`
}

func (d *DelegateHydraDelegationFn) Sig() []byte {
	return HydraDelegation.Abi.Methods["delegate"].ID()
}

func (d *DelegateHydraDelegationFn) EncodeAbi() ([]byte, error) {
	return HydraDelegation.Abi.Methods["delegate"].Encode(d)
}

func (d *DelegateHydraDelegationFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraDelegation.Abi.Methods["delegate"], buf, d)
}

type UndelegateHydraDelegationFn struct {
	Staker types.Address `abi:"staker"`
	Amount *big.Int      `abi:"amount"`
}

func (u *UndelegateHydraDelegationFn) Sig() []byte {
	return HydraDelegation.Abi.Methods["undelegate"].ID()
}

func (u *UndelegateHydraDelegationFn) EncodeAbi() ([]byte, error) {
	return HydraDelegation.Abi.Methods["undelegate"].Encode(u)
}

func (u *UndelegateHydraDelegationFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraDelegation.Abi.Methods["undelegate"], buf, u)
}

type ClaimDelegatorRewardHydraDelegationFn struct {
	Staker types.Address `abi:"staker"`
}

func (c *ClaimDelegatorRewardHydraDelegationFn) Sig() []byte {
	return HydraDelegation.Abi.Methods["claimDelegatorReward"].ID()
}

func (c *ClaimDelegatorRewardHydraDelegationFn) EncodeAbi() ([]byte, error) {
	return HydraDelegation.Abi.Methods["claimDelegatorReward"].Encode(c)
}

func (c *ClaimDelegatorRewardHydraDelegationFn) DecodeAbi(buf []byte) error {
	return decodeMethod(HydraDelegation.Abi.Methods["claimDelegatorReward"], buf, c)
}

type CommissionUpdatedEvent struct {
	Staker        types.Address `abi:"staker"`
	NewCommission *big.Int      `abi:"newCommission"`
}

func (*CommissionUpdatedEvent) Sig() ethgo.Hash {
	return HydraDelegation.Abi.Events["CommissionUpdated"].ID()
}

func (c *CommissionUpdatedEvent) Encode() ([]byte, error) {
	return HydraDelegation.Abi.Events["CommissionUpdated"].Inputs.Encode(c)
}

func (c *CommissionUpdatedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraDelegation.Abi.Events["CommissionUpdated"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraDelegation.Abi.Events["CommissionUpdated"], log, c)
}

func (c *CommissionUpdatedEvent) Decode(input []byte) error {
	return HydraDelegation.Abi.Events["CommissionUpdated"].Inputs.DecodeStruct(input, &c)
}

type DelegatedEvent struct {
	Staker    types.Address `abi:"staker"`
	Delegator types.Address `abi:"delegator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*DelegatedEvent) Sig() ethgo.Hash {
	return HydraDelegation.Abi.Events["Delegated"].ID()
}

func (d *DelegatedEvent) Encode() ([]byte, error) {
	return HydraDelegation.Abi.Events["Delegated"].Inputs.Encode(d)
}

func (d *DelegatedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraDelegation.Abi.Events["Delegated"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraDelegation.Abi.Events["Delegated"], log, d)
}

func (d *DelegatedEvent) Decode(input []byte) error {
	return HydraDelegation.Abi.Events["Delegated"].Inputs.DecodeStruct(input, &d)
}

type UndelegatedEvent struct {
	Staker    types.Address `abi:"staker"`
	Delegator types.Address `abi:"delegator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*UndelegatedEvent) Sig() ethgo.Hash {
	return HydraDelegation.Abi.Events["Undelegated"].ID()
}

func (u *UndelegatedEvent) Encode() ([]byte, error) {
	return HydraDelegation.Abi.Events["Undelegated"].Inputs.Encode(u)
}

func (u *UndelegatedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraDelegation.Abi.Events["Undelegated"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraDelegation.Abi.Events["Undelegated"], log, u)
}

func (u *UndelegatedEvent) Decode(input []byte) error {
	return HydraDelegation.Abi.Events["Undelegated"].Inputs.DecodeStruct(input, &u)
}

type DelegatorRewardDistributedEvent struct {
	Staker types.Address `abi:"staker"`
	Amount *big.Int      `abi:"amount"`
}

func (*DelegatorRewardDistributedEvent) Sig() ethgo.Hash {
	return HydraDelegation.Abi.Events["DelegatorRewardDistributed"].ID()
}

func (d *DelegatorRewardDistributedEvent) Encode() ([]byte, error) {
	return HydraDelegation.Abi.Events["DelegatorRewardDistributed"].Inputs.Encode(d)
}

func (d *DelegatorRewardDistributedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraDelegation.Abi.Events["DelegatorRewardDistributed"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraDelegation.Abi.Events["DelegatorRewardDistributed"], log, d)
}

func (d *DelegatorRewardDistributedEvent) Decode(input []byte) error {
	return HydraDelegation.Abi.Events["DelegatorRewardDistributed"].Inputs.DecodeStruct(input, &d)
}

type DelegatorRewardsClaimedEvent struct {
	Staker    types.Address `abi:"staker"`
	Delegator types.Address `abi:"delegator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*DelegatorRewardsClaimedEvent) Sig() ethgo.Hash {
	return HydraDelegation.Abi.Events["DelegatorRewardsClaimed"].ID()
}

func (d *DelegatorRewardsClaimedEvent) Encode() ([]byte, error) {
	return HydraDelegation.Abi.Events["DelegatorRewardsClaimed"].Inputs.Encode(d)
}

func (d *DelegatorRewardsClaimedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !HydraDelegation.Abi.Events["DelegatorRewardsClaimed"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(HydraDelegation.Abi.Events["DelegatorRewardsClaimed"], log, d)
}

func (d *DelegatorRewardsClaimedEvent) Decode(input []byte) error {
	return HydraDelegation.Abi.Events["DelegatorRewardsClaimed"].Inputs.DecodeStruct(input, &d)
}

type InitializeVestingManagerFactoryFn struct {
	HydraDelegationAddr types.Address `abi:"hydraDelegationAddr"`
}

func (i *InitializeVestingManagerFactoryFn) Sig() []byte {
	return VestingManagerFactory.Abi.Methods["initialize"].ID()
}

func (i *InitializeVestingManagerFactoryFn) EncodeAbi() ([]byte, error) {
	return VestingManagerFactory.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeVestingManagerFactoryFn) DecodeAbi(buf []byte) error {
	return decodeMethod(VestingManagerFactory.Abi.Methods["initialize"], buf, i)
}

type NewVestingManagerVestingManagerFactoryFn struct {
}

func (n *NewVestingManagerVestingManagerFactoryFn) Sig() []byte {
	return VestingManagerFactory.Abi.Methods["newVestingManager"].ID()
}

func (n *NewVestingManagerVestingManagerFactoryFn) EncodeAbi() ([]byte, error) {
	return VestingManagerFactory.Abi.Methods["newVestingManager"].Encode(n)
}

func (n *NewVestingManagerVestingManagerFactoryFn) DecodeAbi(buf []byte) error {
	return decodeMethod(VestingManagerFactory.Abi.Methods["newVestingManager"], buf, n)
}

type NewVestingManagerEvent struct {
	Owner    types.Address `abi:"owner"`
	NewClone types.Address `abi:"newClone"`
}

func (*NewVestingManagerEvent) Sig() ethgo.Hash {
	return VestingManagerFactory.Abi.Events["NewVestingManager"].ID()
}

func (n *NewVestingManagerEvent) Encode() ([]byte, error) {
	return VestingManagerFactory.Abi.Events["NewVestingManager"].Inputs.Encode(n)
}

func (n *NewVestingManagerEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !VestingManagerFactory.Abi.Events["NewVestingManager"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(VestingManagerFactory.Abi.Events["NewVestingManager"], log, n)
}

func (n *NewVestingManagerEvent) Decode(input []byte) error {
	return VestingManagerFactory.Abi.Events["NewVestingManager"].Inputs.DecodeStruct(input, &n)
}

type InitializeAPRCalculatorFn struct {
	Manager types.Address `abi:"manager"`
}

func (i *InitializeAPRCalculatorFn) Sig() []byte {
	return APRCalculator.Abi.Methods["initialize"].ID()
}

func (i *InitializeAPRCalculatorFn) EncodeAbi() ([]byte, error) {
	return APRCalculator.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeAPRCalculatorFn) DecodeAbi(buf []byte) error {
	return decodeMethod(APRCalculator.Abi.Methods["initialize"], buf, i)
}

type InitializeRewardWalletFn struct {
	Managers []ethgo.Address `abi:"managers"`
}

func (i *InitializeRewardWalletFn) Sig() []byte {
	return RewardWallet.Abi.Methods["initialize"].ID()
}

func (i *InitializeRewardWalletFn) EncodeAbi() ([]byte, error) {
	return RewardWallet.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeRewardWalletFn) DecodeAbi(buf []byte) error {
	return decodeMethod(RewardWallet.Abi.Methods["initialize"], buf, i)
}

type DistributeRewardRewardWalletFn struct {
	To     types.Address `abi:"to"`
	Amount *big.Int      `abi:"amount"`
}

func (d *DistributeRewardRewardWalletFn) Sig() []byte {
	return RewardWallet.Abi.Methods["distributeReward"].ID()
}

func (d *DistributeRewardRewardWalletFn) EncodeAbi() ([]byte, error) {
	return RewardWallet.Abi.Methods["distributeReward"].Encode(d)
}

func (d *DistributeRewardRewardWalletFn) DecodeAbi(buf []byte) error {
	return decodeMethod(RewardWallet.Abi.Methods["distributeReward"], buf, d)
}

type FundRewardWalletFn struct {
}

func (f *FundRewardWalletFn) Sig() []byte {
	return RewardWallet.Abi.MethodsBySignature["fund()"].ID()
}

func (f *FundRewardWalletFn) EncodeAbi() ([]byte, error) {
	return RewardWallet.Abi.MethodsBySignature["fund()"].Encode(f)
}

func (f *FundRewardWalletFn) DecodeAbi(buf []byte) error {
	return decodeMethod(RewardWallet.Abi.MethodsBySignature["fund()"], buf, f)
}

type ReceivedEvent struct {
	From   types.Address `abi:"from"`
	Amount *big.Int      `abi:"amount"`
}

func (*ReceivedEvent) Sig() ethgo.Hash {
	return RewardWallet.Abi.Events["Received"].ID()
}

func (r *ReceivedEvent) Encode() ([]byte, error) {
	return RewardWallet.Abi.Events["Received"].Inputs.Encode(r)
}

func (r *ReceivedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !RewardWallet.Abi.Events["Received"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(RewardWallet.Abi.Events["Received"], log, r)
}

func (r *ReceivedEvent) Decode(input []byte) error {
	return RewardWallet.Abi.Events["Received"].Inputs.DecodeStruct(input, &r)
}

type RewardDistributedEvent struct {
	Account types.Address `abi:"account"`
	Amount  *big.Int      `abi:"amount"`
}

func (*RewardDistributedEvent) Sig() ethgo.Hash {
	return RewardWallet.Abi.Events["RewardDistributed"].ID()
}

func (r *RewardDistributedEvent) Encode() ([]byte, error) {
	return RewardWallet.Abi.Events["RewardDistributed"].Inputs.Encode(r)
}

func (r *RewardDistributedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !RewardWallet.Abi.Events["RewardDistributed"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(RewardWallet.Abi.Events["RewardDistributed"], log, r)
}

func (r *RewardDistributedEvent) Decode(input []byte) error {
	return RewardWallet.Abi.Events["RewardDistributed"].Inputs.DecodeStruct(input, &r)
}

type InitializeLiquidityTokenFn struct {
	Name_               string        `abi:"name_"`
	Symbol_             string        `abi:"symbol_"`
	Governer            types.Address `abi:"governer"`
	HydraStakingAddr    types.Address `abi:"hydraStakingAddr"`
	HydraDelegationAddr types.Address `abi:"hydraDelegationAddr"`
}

func (i *InitializeLiquidityTokenFn) Sig() []byte {
	return LiquidityToken.Abi.Methods["initialize"].ID()
}

func (i *InitializeLiquidityTokenFn) EncodeAbi() ([]byte, error) {
	return LiquidityToken.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeLiquidityTokenFn) DecodeAbi(buf []byte) error {
	return decodeMethod(LiquidityToken.Abi.Methods["initialize"], buf, i)
}

type InitializeFeeHandlerFn struct {
	Owner types.Address `abi:"owner"`
}

func (i *InitializeFeeHandlerFn) Sig() []byte {
	return FeeHandler.Abi.Methods["initialize"].ID()
}

func (i *InitializeFeeHandlerFn) EncodeAbi() ([]byte, error) {
	return FeeHandler.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeFeeHandlerFn) DecodeAbi(buf []byte) error {
	return decodeMethod(FeeHandler.Abi.Methods["initialize"], buf, i)
}

type ProtectSetUpProxyGenesisProxyFn struct {
	Initiator types.Address `abi:"initiator"`
}

func (p *ProtectSetUpProxyGenesisProxyFn) Sig() []byte {
	return GenesisProxy.Abi.Methods["protectSetUpProxy"].ID()
}

func (p *ProtectSetUpProxyGenesisProxyFn) EncodeAbi() ([]byte, error) {
	return GenesisProxy.Abi.Methods["protectSetUpProxy"].Encode(p)
}

func (p *ProtectSetUpProxyGenesisProxyFn) DecodeAbi(buf []byte) error {
	return decodeMethod(GenesisProxy.Abi.Methods["protectSetUpProxy"], buf, p)
}

type SetUpProxyGenesisProxyFn struct {
	Logic types.Address `abi:"logic"`
	Admin types.Address `abi:"admin"`
	Data  []byte        `abi:"data"`
}

func (s *SetUpProxyGenesisProxyFn) Sig() []byte {
	return GenesisProxy.Abi.Methods["setUpProxy"].ID()
}

func (s *SetUpProxyGenesisProxyFn) EncodeAbi() ([]byte, error) {
	return GenesisProxy.Abi.Methods["setUpProxy"].Encode(s)
}

func (s *SetUpProxyGenesisProxyFn) DecodeAbi(buf []byte) error {
	return decodeMethod(GenesisProxy.Abi.Methods["setUpProxy"], buf, s)
}

type TransparentUpgradeableProxyConstructorFn struct {
	Logic  types.Address `abi:"_logic"`
	Admin_ types.Address `abi:"admin_"`
	Data   []byte        `abi:"_data"`
}

func (t *TransparentUpgradeableProxyConstructorFn) Sig() []byte {
	return TransparentUpgradeableProxy.Abi.Constructor.ID()
}

func (t *TransparentUpgradeableProxyConstructorFn) EncodeAbi() ([]byte, error) {
	return TransparentUpgradeableProxy.Abi.Constructor.Inputs.Encode(t)
}

func (t *TransparentUpgradeableProxyConstructorFn) DecodeAbi(buf []byte) error {
	return decodeMethod(TransparentUpgradeableProxy.Abi.Constructor, buf, t)
}
